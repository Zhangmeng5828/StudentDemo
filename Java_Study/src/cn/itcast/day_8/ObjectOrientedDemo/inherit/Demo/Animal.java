package cn.itcast.day_8.ObjectOrientedDemo.inherit.Demo;

/**
 * @author menegzhang
 * @data 2024/8/23
 * @apiNote
 */
public class Animal {

        //java只能单继承，不支持多继承，但是可以通过接口实现多继承
        /**
         * TODO: 继承
         * 1. 子类可以继承父类的属性和方法
         * 2. 子类可以重写父类的方法
         * 3. 子类可以添加自己的属性和方法
         * 4. 子类可以调用父类的方法
         * 5. 子类可以访问父类的私有属性和方法
         * 6. 子类可以调用父类的构造方法
         * 7. 子类可以实现多个接口
         * 8. 子类可以扩展父类的抽象类
         * 9. 子类可以实现父类的静态方法
         * 10. 子类可以实现父类的final方法
         * 11. 子类可以实现父类的私有方法
         * 12. 子类可以实现父类的受保护方法
         * 13. 子类可以实现父类的默认方法
         */
        /**
         * 继承的格式：
         * class 子类 extends 父类 {
         *     // 子类独有属性和方法
         * }
         * 或者
         * class 子类 implements 接口1, 接口2, ... {
         *     // 子类独有属性和方法
         * }
         * 或者
         * class 子类 extends 父类 implements 接口1, 接口2, ... {
         *     // 子类独有属性和方法
         * }
         * 或者
         * class 子类 extends 抽象类 {
         *     // 子类独有属性和方法
         * }
         * 或者
         * class 子类 extends 父类 implements 抽象类 {
         *     // 子类独有属性和方法
         * }
         * 或者
         * class 子类 extends 父类 implements 接口1, 接口2, ... {
         *     // 子类独有属性和方法
         * }
         * 或者
         * class 子类 extends 父类 implements 抽象类, 接口1, 接口2, ... {
         *     // 子类独有属性和方法
         * }
         */

        /*
         * 继承的好处：
         * 1. 代码重用
         * 2. 提高代码的可扩展性
         * 3. 提高代码的可维护性
         * 4. 降低代码的耦合性
         * 5. 实现多态
         * 6. 实现封装
         * 7. 实现多态
         * 8. 实现多继承
         * 9. 实现接口
         * 10. 实现抽象类
         */

        /**
         * 继承的练习（自己设计一个继承体系）
         * 现在有四种动物：布偶猫、中国狸花猫、哈士奇、泰迪。
         * 暂时不考虑属性,只要考虑行为。
         * 请按照继承的思想特点进行继承体系的设计。
         * 四种动物分别有以下的行为：
         * 布偶猫：吃饭、喝水、抓老鼠
         * 中国狸花猫：吃饭、喝水、抓老鼠
         * 哈士奇：吃饭、喝水、看家、拆家
         * 泰迪：“吃饭、喝水、看家、蹭一蹭
         */

        //动物类
        //注意事项：
        //子类只能访问父类的public方法和属性，不能访问父类的private方法和属性
        public void eat() {
            System.out.println("吃饭");
        }


        public void drink() {
            System.out.println("喝水");
        }

}
